In your own words, what is a computer really doing whenever you type a letter on a keyboard?

When pressing keys on the keyboard, we are telling the computer what to do. Pressing one of the keys on the keyboard, sends a scan code that generates a code / electric signal. To display the pressed letter on the screen, the computer pulls the image of the letter from its memory that is represented by a ASCII code. The computer interprets it, considering its lines and circles and rendering it in pixels. The letter that was pressed on the keyboard is then displayed on the screen.

In your own words, how do computers use input and output to create experiences?

An input device is any piece of hardware that allows us to send data to a computer. So if you type a message on a keyboard or touch a screen to make something happen you're using an input device. An output device is any piece of hardware that allows a computer to communicate information to us. For example, displaying a message on a screen, playing sound via a speaker or headphones or printing a document. So, if you want to play music on your phone and press play on the touchscreen, you're using an input device to tell your phone to play the music. The phone will then play the music and the sound will come through an output device: your headphones.

Explain why software products are essentially “infinitely reproducible nothings.”

Software products are essentially “infinitely reproducible nothings” because solving a difficult problem once, will essentially solve that problem in all cases going forward, forever. How well that problem is solved depends entirely on the people creating the solution.

Explain in your own words how code becomes software.

The computer takes the programming code and reads through it, character by character. Computers go through things character by character, bit by bit, transforming the code into other kinds of code. Once the computer has tokens, it will reorganize the tokens, making it more primitively intuitive. The Bolus compiler organizes the tokens, and then it loads that program into its memory. When the code contains an input, operation and an output, it becomes a software.

Explain “algorithms” in your own words.

An algorithm is a well-defined procedure that solves a problem. It lays a set of steps used to complete a specific task. They're the building blocks for programming, and they allow things like computers, smartphones, and websites to function and make decisions. There are many algorithms and great algorithms get a name. Algorithms can be compared to maps.  If there were any kind of error in the code, the app wouldn't be able to follow these algorithms correctly, meaning you wouldn't receive your directions. Computers can use algorithms to perform everyday tasks.

Explain the DRY principle.

The DRY principle was formulated by Andy Hunt and Dave Thomas. It stands for Don’t Repeat Yourself. The DRY principle aimed to reduce repetition of software patterns, replacing it with abstractions. The concept behind it is to do things once and don’t waste energy repeating yourself over and over. Ford mentioned "you should name things once, do things once, create a function once, and let the computer repeat itself.”

In your own words, what is object-oriented programming?

Object-oriented programming split apart into self-contained objects. Each object is representing a different part of the application and each object contains its own data and its own logic. They can communicate between themselves. Class and object goes together with object oriented programming. Class is a blueprint that describes what something is but it isn’t the thing itself. The object is the thing and is created from the class. Objects are created based on the class. Object-oriented programming is the idea that classes are self-contained units that represent both the data and the code that works.

In your own words explain data and how it relates to code.

An overwhelming amount of data is generated from everywhere. Data can be generated by third parties and can also be user-created, like e-mails. Sometimes the machines themselves create data, Coders talk about data all the time. When creating a website, you need to get data out of a database and put them into a Web page. If you’re the IRS, tax returns data, are broken into fields. Coding of data refers to the process of transforming collected information or observations to a set of meaningful, cohesive categories.

What is a framework?

Any programming, especially Web programming has an adopted framework. A framework is a software that’s already been developed and is used to help you create your own application. It’s a reusable code that provides specific functionality that you can use in your programs. The intention of a framework is to avoid the need to reinvent the wheel. There are codes out there that you can reuse to perform the function you are wanting to do. Using a framework helps save time, helps save the need to write the same old code, and can also help one try something new by creating a different experience. It allows one to focus on the program without having to worry about the low-level stuff. Many frameworks have been worked on by many developers, and it has been tested and optimized.

What is debugging?

It is the process of detecting and removing existing and potential errors (also called ‘bugs’) in a software code that causes it to crash or not work. A developer must know how to fix the problem. When the bug is fixed, then the software is ready to use. Debugging tools (called debuggers) are used to identify coding errors at various development stages. The debugging development stages are identifying the bug, capturing the program snapshot when the bug appears, getting all the variable values and states of the program, analyzing the snapshot based on the state and action, trying to find the cause of the bug, and fixing the existing bug, but also check that any new bug does not occur.

Now, with more of an understanding of what code is, why do you want to learn how to code?

Learning how the product mechanism is built is important so that I may help create better user experiences. I take a logical and collaborative approach to the development and design process, prioritizing the user at every step. As a web developer can modify things and provide better solutions to the problems, providing maintenance, updates and troubleshooting. I am curious in discovering new knowledge and understanding the technicalities of web development and how it works. I am willing to face the technical challenges that I will face because it is by doing so it will increase my understanding of specific skills about web development. 
